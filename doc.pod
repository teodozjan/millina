

=head1 Simulation

Model is very important. It must be as detailed as possible but not more...

In this model I will borrow a litle from HLA IEEE 1516 but not RTI. 

The simulation will be made of objects that will affect each other via interactions just like High Level Architecture does.

Areas that were optional in HLA here will be base feature.

=head2 Area

Position of object is not important for simulation but area that object come interaction with. Area is the maximum range that any objects may recieve or want to interact HLA simulation designers already knew that and introduced that as part of standard.

=head3 Rectangle

It was easy to use rectangle for simulation. It can be defined by only four numbers and it is trivial to define its overlaping. 

Planes overlap each other if at least one of vertex is above lower vertex of second plane and below upper vertex corners. 

     for $rect1.toVertex -> $vertex {
       $rect2.x[0] <= $vertex.x >= $rect.x[1];
       $rect2.y[0] <= $vertex.y >= $rect.y[1];
     }

=head3 Target

Target is special area of simulation that will match single object. I hope storing references will not give worse performance than using ObjAt. Anyway it will be easy to override overlap method... especilly if C<eqv> will start working on complex objects without any effort.

=head3 Wildcard

Wildcard is B<Area> that allows to interact with all objects.  

=head2 Object 

     "It is going to be quite some time before stone notices its disfiguring skin disease and starts to scratch,
     which is just as well."
     â€• Terry Pratchett, Equal Rites

=head3 Dead object

Dead object is kind of object that is not producing any interaction. 

=head3 Passive Object

Passive object is not subscribed to any interaction.

=head3 Active object

Active object produces interactions

=head2 Interaction

Interaction will know what to do with its targets.
 
=head3 Subscribe

Subscription should not contain areas due to it can change a lot during simulation. Area is argument of notify method.

=head1 Use cases

=head2 8 queens problem

=head3 Objects: player, chessboard

Every chessboard tile can have three states Free, Attacked and Hetman on

Player is deciding when to end.

=head3 Interactions: place queen, attack_fields, find_free

Player place_queen in random space. All attacked fields are marked. New queen is taking place until no free fields are present.
